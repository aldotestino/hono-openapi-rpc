/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedSettingsRouteImport } from './routes/_authed/settings'
import { Route as AuthedNotesIndexRouteImport } from './routes/_authed/notes/index'
import { Route as AuthedNotesNewRouteImport } from './routes/_authed/notes/new'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedSettingsRoute = AuthedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedNotesIndexRoute = AuthedNotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedNotesNewRoute = AuthedNotesNewRouteImport.update({
  id: '/notes/new',
  path: '/notes/new',
  getParentRoute: () => AuthedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signup': typeof SignupRoute
  '/settings': typeof AuthedSettingsRoute
  '/notes/new': typeof AuthedNotesNewRoute
  '/notes': typeof AuthedNotesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signup': typeof SignupRoute
  '/settings': typeof AuthedSettingsRoute
  '/notes/new': typeof AuthedNotesNewRoute
  '/notes': typeof AuthedNotesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/signup': typeof SignupRoute
  '/_authed/settings': typeof AuthedSettingsRoute
  '/_authed/notes/new': typeof AuthedNotesNewRoute
  '/_authed/notes/': typeof AuthedNotesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/signup' | '/settings' | '/notes/new' | '/notes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signup' | '/settings' | '/notes/new' | '/notes'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/signup'
    | '/_authed/settings'
    | '/_authed/notes/new'
    | '/_authed/notes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/notes/': {
      id: '/_authed/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthedNotesIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/notes/new': {
      id: '/_authed/notes/new'
      path: '/notes/new'
      fullPath: '/notes/new'
      preLoaderRoute: typeof AuthedNotesNewRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedRouteChildren {
  AuthedSettingsRoute: typeof AuthedSettingsRoute
  AuthedNotesNewRoute: typeof AuthedNotesNewRoute
  AuthedNotesIndexRoute: typeof AuthedNotesIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedSettingsRoute: AuthedSettingsRoute,
  AuthedNotesNewRoute: AuthedNotesNewRoute,
  AuthedNotesIndexRoute: AuthedNotesIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
